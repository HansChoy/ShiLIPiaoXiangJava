<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.shixun.ihome.publicservice.mapper.ISalaryMapper" >
  <resultMap id="BaseResultMap" type="com.shixun.ihome.publicservice.pojo.ISalary" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="basesalary" property="basesalary" jdbcType="DOUBLE" />
    <result column="bonus" property="bonus" jdbcType="DOUBLE" />
    <result column="royalty" property="royalty" jdbcType="DOUBLE" />
    <result column="ssum" property="ssum" jdbcType="DOUBLE" />
    <result column="staff_id" property="staffId" jdbcType="INTEGER" />
    <result column="updatetime" property="updatetime" jdbcType="TIMESTAMP" />

  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, basesalary, bonus, royalty, ssum, staff_id, updatetime
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.shixun.ihome.publicservice.pojo.ISalaryExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from i_salary
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from i_salary
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from i_salary
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.shixun.ihome.publicservice.pojo.ISalaryExample" >
    delete from i_salary
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.shixun.ihome.publicservice.pojo.ISalary" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into i_salary (basesalary, bonus, royalty, 
      ssum, staff_id, updatetime
      )
    values (#{basesalary,jdbcType=DOUBLE}, #{bonus,jdbcType=DOUBLE}, #{royalty,jdbcType=DOUBLE}, 
      #{ssum,jdbcType=DOUBLE}, #{staffId,jdbcType=INTEGER}, #{updatetime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.shixun.ihome.publicservice.pojo.ISalary" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into i_salary
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="basesalary != null" >
        basesalary,
      </if>
      <if test="bonus != null" >
        bonus,
      </if>
      <if test="royalty != null" >
        royalty,
      </if>
      <if test="ssum != null" >
        ssum,
      </if>
      <if test="staffId != null" >
        staff_id,
      </if>
      <if test="updatetime != null" >
        updatetime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="basesalary != null" >
        #{basesalary,jdbcType=DOUBLE},
      </if>
      <if test="bonus != null" >
        #{bonus,jdbcType=DOUBLE},
      </if>
      <if test="royalty != null" >
        #{royalty,jdbcType=DOUBLE},
      </if>
      <if test="ssum != null" >
        #{ssum,jdbcType=DOUBLE},
      </if>
      <if test="staffId != null" >
        #{staffId,jdbcType=INTEGER},
      </if>
      <if test="updatetime != null" >
        #{updatetime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.shixun.ihome.publicservice.pojo.ISalaryExample" resultType="java.lang.Integer" >
    select count(*) from i_salary
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update i_salary
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.basesalary != null" >
        basesalary = #{record.basesalary,jdbcType=DOUBLE},
      </if>
      <if test="record.bonus != null" >
        bonus = #{record.bonus,jdbcType=DOUBLE},
      </if>
      <if test="record.royalty != null" >
        royalty = #{record.royalty,jdbcType=DOUBLE},
      </if>
      <if test="record.ssum != null" >
        ssum = #{record.ssum,jdbcType=DOUBLE},
      </if>
      <if test="record.staffId != null" >
        staff_id = #{record.staffId,jdbcType=INTEGER},
      </if>
      <if test="record.updatetime != null" >
        updatetime = #{record.updatetime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update i_salary
    set id = #{record.id,jdbcType=INTEGER},
      basesalary = #{record.basesalary,jdbcType=DOUBLE},
      bonus = #{record.bonus,jdbcType=DOUBLE},
      royalty = #{record.royalty,jdbcType=DOUBLE},
      ssum = #{record.ssum,jdbcType=DOUBLE},
      staff_id = #{record.staffId,jdbcType=INTEGER},
      updatetime = #{record.updatetime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.shixun.ihome.publicservice.pojo.ISalary" >
    update i_salary
    <set >
      <if test="basesalary != null" >
        basesalary = #{basesalary,jdbcType=DOUBLE},
      </if>
      <if test="bonus != null" >
        bonus = #{bonus,jdbcType=DOUBLE},
      </if>
      <if test="royalty != null" >
        royalty = #{royalty,jdbcType=DOUBLE},
      </if>
      <if test="ssum != null" >
        ssum = #{ssum,jdbcType=DOUBLE},
      </if>
      <if test="staffId != null" >
        staff_id = #{staffId,jdbcType=INTEGER},
      </if>
      <if test="updatetime != null" >
        updatetime = #{updatetime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.shixun.ihome.publicservice.pojo.ISalary" >
    update i_salary
    set basesalary = #{basesalary,jdbcType=DOUBLE},
      bonus = #{bonus,jdbcType=DOUBLE},
      royalty = #{royalty,jdbcType=DOUBLE},
      ssum = #{ssum,jdbcType=DOUBLE},
      staff_id = #{staffId,jdbcType=INTEGER},
      updatetime = #{updatetime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="addsalary" resultType="map">
  select s.id,s.name,s.basesalary,(avg(e.attitude_valuation)+avg(e.quality_valuation))*(r.bonusrate)/2 as bonus,sum(o.price)*(r.rolaty) as rolaty,now() as updatetime
from i_salary_rate r,i_order o,i_order_staff os,i_staff s,i_evaluate e
where s.id=os.staff_id
and os.order_id=e.order_id
and os.order_id=o.id
and s.detailtype_id=r.detailtype_id
GROUP BY s.name
  </select>



  <insert id="insertSalaryMonth" parameterType="java.util.List">
    <foreach collection="list" item="bean" index="index" open="" close="" separator=";">
      insert into i_salary (bonus, royalty,
       staff_id, updatetime, basesalary
      )
      select #{bean.bonus},#{bean.rolaty},#{bean.id},#{bean.updatetime},#{bean.basesalary}
      where NOT EXISTS
      (select * from i_salary where year(updatetime)=year(#{bean.updatetime})
      and month(updatetime)=month(#{bean.updatetime})
      and staff_id=#{bean.id})

    </foreach>
  </insert>

  <!--<insert id="addonesalary" parameterType="java.util.List">-->
    <!--<foreach collection="list" item="bean" index="index" open="" close="" separator=";">-->
      <!--insert into i_salary (bonus, royalty,-->
      <!--staff_id, updatetime-->
      <!--)-->
      <!--values (#{bean.bonus,jdbcType=DOUBLE}, #{bean.rolaty,jdbcType=DOUBLE},-->
      <!--#{bean.id,jdbcType=INTEGER}, #{bean.updatetime,jdbcType=TIMESTAMP}-->
      <!--) where NOT EXISTS (select * from i_salary where year(updatetime)=year(#{bean.updatetime})-->
      <!--and month(updatetime)=month(#{bean.updatetime}) and staff_id=#{bean.id})-->
    <!--</foreach>-->
  <!--</insert>-->

  <update id="salarynow" parameterType="java.util.List">
    <foreach collection="list" item="bean" index="index" open="" close="" separator=";">
      update i_salary set updatetime=#{bean.updatetime},ssum=#{bean.basesalary}+#{bean.bonus}+#{bean.rolaty},bonus=#{bean.bonus},royalty=#{bean.rolaty},basesalary=#{bean.basesalary}
      where staff_id=#{bean.id}
      and year(updatetime)=year(#{bean.updatetime})
      and month(updatetime)=month(#{bean.updatetime})
    </foreach>
  </update>

  <resultMap id="listsalary" type="com.shixun.ihome.publicservice.pojo.ISalary" extends="BaseResultMap">
    <association property="iStaff" javaType="com.shixun.ihome.publicservice.pojo.IStaff" resultMap="com.shixun.ihome.publicservice.mapper.IStaffMapper.BaseResultMap">
    </association>
  </resultMap>

  <select id="listall" resultMap="listsalary">
      select sa.*,st.*,d.typename as typename from i_salary sa,i_staff st,i_detailtype d where sa.staff_id=st.id and st.detailtype_id=d.id
  </select>


  <select id="existMonth" resultMap="listsalary" parameterType="Date">
      select * from i_salary sa,i_staff st,i_detailtype t where year(sa.updatetime)=year(#{date3})
and month(sa.updatetime)=month(#{date3})
and sa.staff_id=st.id and t.id=st.detailtype_id
  </select>
</mapper>